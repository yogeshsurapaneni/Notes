chef installation:-
chef installation page- https://docs.chef.io/install_dk.html
chef development kit path setup- https://docs.chef.io/chefdk_setup.html


Work Station:
Find the package
`https://downloads.chef.io/chefdk#ubuntu`
Download the package
`wget https://packages.chef.io/files/stable/chefdk/2.4.17/ubuntu/16.04/chefdk_2.4.17-1_amd64.deb` 
Install the package
`dpkg -i chefdk_2.4.17-1_amd64.deb`
Add Ruby to Path
`echo 'export PATH="/opt/chefdk/embedded/bin:$PATH"' >> ~/.bash_profile && source ~/.bash_profile`
Download Chef-repo from server

Node Creation:
1)mkdir -p ~/chef-repo/.chef
2)add knife.rb, .pem files to the .chef
3)knife ssl check - to check the connection to the server. here the server is the UI. (chef login)
4)connect the master and slave using ssh
5)using knife bootstrap command connect your slave or node to the chef server.
   #knife bootstrap 10.142.0.3(internal ip) -x root -P root -N node
6)to make sure the connected nodes we use command #knife node list
7)to see the data about your node we can use command #knife node show nodename.

Cookbooks:
1) write the cookbooks in cookbooks folder.
2)#knife cookbook upload cookbook-name (will upload your cookbook to server).
3)#knife cookbook list (will give you the list of cookbooks present in your server).

Node:
1) run chef-client to update the cookbooks from server.
2) add the cookbooks into nodes runlist to access them in node.

Instances:
***If you're working with an Amazon EC2, Microsoft Azure, or Google Compute Engine instance, 
replace the ipaddress part of the --attribute ipaddress argument with the corresponding entry from this table.**

Cloud provider                 	Attribute	           Notes
EC2	                  cloud.public_hostname	     Chef sets this attribute during the bootstrap process.
Azure	              cloud.public_ip            This is the attribute you set in the previous part when you bootstrapped your node.
Compute Engine	      cloud_v2.public_ipv4	     Chef sets this attribute during the bootstrap process.
For example, if you're working with an EC2 instance, you would specify --attribute cloud.public_hostname.


Chef Supermarket:
1)to download the cookbook from the chef central repository called supermarket we use the command 
# knife supermarket download cookbook-name
# knife supermarket install mysql(for example)
# knife supermarket search mysql 
# knife supermarket show COOKBOOK_NAME - to show the details for the cookbook.

Test Kitchen:
* Test Kitchen runs your infrastructure code in an isolated environment that resembles your production environment. With Test Kitchen, you continue to write your Chef code from your workstation,but instead of uploading your code
to the Chef server and applying it to a node, Test Kitchen applies your code to a temporary environment, such as a virtual machine on your workstation or a cloud or container instance.
# chef gem install kitchen-google - to install the test-kitchen.
=> Kitchen Create - In this step, Test Kitchen creates an instance of your virtual environment, for example, an Ubuntu virtual machine.
=> Kitchen Converge - In this step, Test Kitchen applies your cookbook to the virtual environment.
=> Kitchen Login - In this step, Test Kitchen creates an SSH session into your virtual environment.
=> Verify - In this step, you manually verify that your virtual environment is configured as you expect.
=> Kitchen Destroy - 	In this step, Test Kitchen shuts down and destroys your virtual environment.

-> .Kitchen.yml:
driver - specifies the software that manages the machine. We're using the Test Kitchen driver (list of other popular drivers).
provisioner - specifies how to run Chef. We use chef_zero because it enables you to mimic a Chef server environment on your local machine. This allows us to work with node attributes and other Chef server features.
transport - specifies how to execute commands remotely on the test instance. WinRM is the default transport on Windows; SSH is the default on all other operating systems.
verifier - specifies which application to use when running automated tests. You'll learn more about automated testing in a future module.
platforms - specifies the target operating systems. We're targeting just one – Ubuntu 16.04.
suites - specifies what we want to apply to the virtual environment. You can have more than one suite. We define just one, named default. This is where we provide the run-list, which defines which recipes to run and in the order to run them.
Your run-list contains one recipe – the learn_chef_apache2 cookbook's default recipe.

# Kitchen list - to see whats in the kitchen.
# kitchen create - creating the instance using the kitchen.
